const puppeteer = require('puppeteer');
const { GoogleSpreadsheet } = require('google-spreadsheet');
require('dotenv').config();

async function scrapeInvoiceData(url) {
    const browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();
    await page.goto(url, { waitUntil: 'networkidle2' });
    
    // Extract invoice details
    const invoiceData = await page.evaluate(() => {
        let data = {};
        data.grandTotal = document.querySelector('h1')?.innerText || '';
        data.invoiceNumber = document.querySelector('h2')?.innerText.match(/\d+/)?.[0] || '';
        data.businessName = document.querySelector('h3')?.innerText || '';
        data.payDeadline = document.querySelector("span:contains('Pay deadline')")?.nextSibling?.innerText || '';
        return data;
    });
    
    // Click "Show all" if it exists
    const showAllButton = await page.$("button:contains('Show all')");
    if (showAllButton) {
        await showAllButton.click();
        await page.waitForTimeout(2000);
    }
    
    // Extract item details
    const items = await page.evaluate(() => {
        let itemList = [];
        document.querySelectorAll('.invoice-item-row').forEach(row => {
            let itemName = row.querySelector('.item-name')?.innerText || '';
            let itemPrice = row.querySelector('.item-price')?.innerText || '';
            let itemTotal = row.querySelector('.item-total')?.innerText || '';
            itemList.push([itemName, itemPrice, itemTotal]);
        });
        return itemList;
    });
    
    await browser.close();
    return { ...invoiceData, items };
}

async function updateGoogleSheet() {
    const doc = new GoogleSpreadsheet(process.env.SHEET_ID);
    await doc.useServiceAccountAuth(require('./google-credentials.json'));
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    const rows = await sheet.getRows();
    
    for (let row of rows) {
        if (!row['Grand Total']) { // Only scrape if not already updated
            let invoiceData = await scrapeInvoiceData(row['Invoice Link']);
            row['Grand Total'] = invoiceData.grandTotal;
            row['Invoice Number'] = invoiceData.invoiceNumber;
            row['Business Name'] = invoiceData.businessName;
            row['Pay Deadline'] = invoiceData.payDeadline;
            
            invoiceData.items.forEach((item, index) => {
                row[`ItemA${index+1}`] = item[0];
                row[`ItemB${index+1}`] = item[1];
                row[`ItemC${index+1}`] = item[2];
            });
            
            await row.save();
        }
    }
}

updateGoogleSheet().then(() => console.log('Done updating sheets')).catch(console.error);
